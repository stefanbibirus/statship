{"ast":null,"code":"import { api } from './api';\n\n/**\n * Autentifică un utilizator\n * \n * @param {string} email Adresa de email\n * @param {string} password Parola\n * @returns {Promise} Datele utilizatorului și token-ul\n */\nexport const login = async (email, password) => {\n  try {\n    const response = await api.post('/api/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data && error.response.data.message) {\n      throw new Error(error.response.data.message);\n    }\n    throw error;\n  }\n};\n\n/**\n * Înregistrează un utilizator nou\n * \n * @param {string} username Numele de utilizator\n * @param {string} email Adresa de email\n * @param {string} password Parola\n * @returns {Promise} Datele utilizatorului și token-ul\n */\nexport const register = async (username, email, password) => {\n  try {\n    const response = await api.post('/api/auth/register', {\n      username,\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data && error.response.data.message) {\n      throw new Error(error.response.data.message);\n    }\n    throw error;\n  }\n};\n\n/**\n * Verifică autentificarea utilizatorului curent\n * \n * @returns {Promise} Datele utilizatorului\n */\nexport const checkAuth = async () => {\n  try {\n    const response = await api.get('/api/auth/me');\n    return response.data.user;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["api","login","email","password","response","post","data","error","message","Error","register","username","checkAuth","get","user"],"sources":["/home/statship/relationship-helix-frontend/src/services/auth.js"],"sourcesContent":["import { api } from './api';\n\n/**\n * Autentifică un utilizator\n * \n * @param {string} email Adresa de email\n * @param {string} password Parola\n * @returns {Promise} Datele utilizatorului și token-ul\n */\nexport const login = async (email, password) => {\n  try {\n    const response = await api.post('/api/auth/login', { email, password });\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data && error.response.data.message) {\n      throw new Error(error.response.data.message);\n    }\n    throw error;\n  }\n};\n\n/**\n * Înregistrează un utilizator nou\n * \n * @param {string} username Numele de utilizator\n * @param {string} email Adresa de email\n * @param {string} password Parola\n * @returns {Promise} Datele utilizatorului și token-ul\n */\nexport const register = async (username, email, password) => {\n  try {\n    const response = await api.post('/api/auth/register', { username, email, password });\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data && error.response.data.message) {\n      throw new Error(error.response.data.message);\n    }\n    throw error;\n  }\n};\n\n/**\n * Verifică autentificarea utilizatorului curent\n * \n * @returns {Promise} Datele utilizatorului\n */\nexport const checkAuth = async () => {\n  try {\n    const response = await api.get('/api/auth/me');\n    return response.data.user;\n  } catch (error) {\n    throw error;\n  }\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,iBAAiB,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACvE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,CAACH,QAAQ,IAAIG,KAAK,CAACH,QAAQ,CAACE,IAAI,IAAIC,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,EAAE;MACxE,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC;IAC9C;IACA,MAAMD,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAET,KAAK,EAAEC,QAAQ,KAAK;EAC3D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,oBAAoB,EAAE;MAAEM,QAAQ;MAAET,KAAK;MAAEC;IAAS,CAAC,CAAC;IACpF,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,CAACH,QAAQ,IAAIG,KAAK,CAACH,QAAQ,CAACE,IAAI,IAAIC,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,EAAE;MACxE,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC;IAC9C;IACA,MAAMD,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACa,GAAG,CAAC,cAAc,CAAC;IAC9C,OAAOT,QAAQ,CAACE,IAAI,CAACQ,IAAI;EAC3B,CAAC,CAAC,OAAOP,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}