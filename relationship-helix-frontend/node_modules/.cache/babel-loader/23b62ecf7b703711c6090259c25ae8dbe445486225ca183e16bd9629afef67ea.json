{"ast":null,"code":"let socket=null;/**\n * Configurează conexiunea WebSocket\n * \n * @param {string} relationshipId ID-ul relației\n * @param {Function} onPositionUpdate Callback pentru actualizări de poziție\n */export const setupWebsocket=(relationshipId,onPositionUpdate)=>{// Închide orice conexiune existentă\nif(socket){closeWebsocket();}// Obține token-ul de autentificare\nconst token=localStorage.getItem('auth_token');if(!token){console.error('Autentificare necesară pentru WebSocket');return;}// Construiește URL-ul WebSocket\nconst wsProtocol=window.location.protocol==='https:'?'wss:':'ws:';const wsHost=process.env.REACT_APP_WS_HOST||window.location.hostname+':8080';const wsUrl=`${wsProtocol}//${wsHost}/ws/relationship/${relationshipId}?token=${token}`;// Creează conexiunea WebSocket\nsocket=new WebSocket(wsUrl);// Handler pentru deschiderea conexiunii\nsocket.onopen=()=>{console.log('Conexiune WebSocket stabilită');};// Handler pentru primirea mesajelor\nsocket.onmessage=event=>{try{const data=JSON.parse(event.data);// Verifică tipul mesajului\nif(data.type==='position_update'){onPositionUpdate(data.payload);}}catch(error){console.error('Eroare la procesarea mesajului WebSocket:',error);}};// Handler pentru erori\nsocket.onerror=error=>{console.error('Eroare WebSocket:',error);};// Handler pentru închiderea conexiunii\nsocket.onclose=event=>{console.log(`Conexiune WebSocket închisă: ${event.code} ${event.reason}`);// Reconectare automată după 5 secunde în cazul unei închideri anormale\nif(event.code!==1000){setTimeout(()=>{setupWebsocket(relationshipId,onPositionUpdate);},5000);}};return socket;};/**\n * Închide conexiunea WebSocket\n */export const closeWebsocket=()=>{if(socket){socket.close(1000,'Închidere normală');socket=null;}};","map":{"version":3,"names":["socket","setupWebsocket","relationshipId","onPositionUpdate","closeWebsocket","token","localStorage","getItem","console","error","wsProtocol","window","location","protocol","wsHost","process","env","REACT_APP_WS_HOST","hostname","wsUrl","WebSocket","onopen","log","onmessage","event","data","JSON","parse","type","payload","onerror","onclose","code","reason","setTimeout","close"],"sources":["/home/statship/relationship-helix-frontend/src/services/websocket.js"],"sourcesContent":["let socket = null;\n\n/**\n * Configurează conexiunea WebSocket\n * \n * @param {string} relationshipId ID-ul relației\n * @param {Function} onPositionUpdate Callback pentru actualizări de poziție\n */\nexport const setupWebsocket = (relationshipId, onPositionUpdate) => {\n  // Închide orice conexiune existentă\n  if (socket) {\n    closeWebsocket();\n  }\n  \n  // Obține token-ul de autentificare\n  const token = localStorage.getItem('auth_token');\n  \n  if (!token) {\n    console.error('Autentificare necesară pentru WebSocket');\n    return;\n  }\n  \n  // Construiește URL-ul WebSocket\n  const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n  const wsHost = process.env.REACT_APP_WS_HOST || window.location.hostname + ':8080';\n  const wsUrl = `${wsProtocol}//${wsHost}/ws/relationship/${relationshipId}?token=${token}`;\n  \n  // Creează conexiunea WebSocket\n  socket = new WebSocket(wsUrl);\n  \n  // Handler pentru deschiderea conexiunii\n  socket.onopen = () => {\n    console.log('Conexiune WebSocket stabilită');\n  };\n  \n  // Handler pentru primirea mesajelor\n  socket.onmessage = (event) => {\n    try {\n      const data = JSON.parse(event.data);\n      \n      // Verifică tipul mesajului\n      if (data.type === 'position_update') {\n        onPositionUpdate(data.payload);\n      }\n    } catch (error) {\n      console.error('Eroare la procesarea mesajului WebSocket:', error);\n    }\n  };\n  \n  // Handler pentru erori\n  socket.onerror = (error) => {\n    console.error('Eroare WebSocket:', error);\n  };\n  \n  // Handler pentru închiderea conexiunii\n  socket.onclose = (event) => {\n    console.log(`Conexiune WebSocket închisă: ${event.code} ${event.reason}`);\n    \n    // Reconectare automată după 5 secunde în cazul unei închideri anormale\n    if (event.code !== 1000) {\n      setTimeout(() => {\n        setupWebsocket(relationshipId, onPositionUpdate);\n      }, 5000);\n    }\n  };\n  \n  return socket;\n};\n\n/**\n * Închide conexiunea WebSocket\n */\nexport const closeWebsocket = () => {\n  if (socket) {\n    socket.close(1000, 'Închidere normală');\n    socket = null;\n  }\n};"],"mappings":"AAAA,GAAI,CAAAA,MAAM,CAAG,IAAI,CAEjB;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,cAAc,CAAGA,CAACC,cAAc,CAAEC,gBAAgB,GAAK,CAClE;AACA,GAAIH,MAAM,CAAE,CACVI,cAAc,CAAC,CAAC,CAClB,CAEA;AACA,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAEhD,GAAI,CAACF,KAAK,CAAE,CACVG,OAAO,CAACC,KAAK,CAAC,yCAAyC,CAAC,CACxD,OACF,CAEA;AACA,KAAM,CAAAC,UAAU,CAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAK,QAAQ,CAAG,MAAM,CAAG,KAAK,CACzE,KAAM,CAAAC,MAAM,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAIN,MAAM,CAACC,QAAQ,CAACM,QAAQ,CAAG,OAAO,CAClF,KAAM,CAAAC,KAAK,CAAG,GAAGT,UAAU,KAAKI,MAAM,oBAAoBZ,cAAc,UAAUG,KAAK,EAAE,CAEzF;AACAL,MAAM,CAAG,GAAI,CAAAoB,SAAS,CAACD,KAAK,CAAC,CAE7B;AACAnB,MAAM,CAACqB,MAAM,CAAG,IAAM,CACpBb,OAAO,CAACc,GAAG,CAAC,+BAA+B,CAAC,CAC9C,CAAC,CAED;AACAtB,MAAM,CAACuB,SAAS,CAAIC,KAAK,EAAK,CAC5B,GAAI,CACF,KAAM,CAAAC,IAAI,CAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC,CAEnC;AACA,GAAIA,IAAI,CAACG,IAAI,GAAK,iBAAiB,CAAE,CACnCzB,gBAAgB,CAACsB,IAAI,CAACI,OAAO,CAAC,CAChC,CACF,CAAE,MAAOpB,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAEA,KAAK,CAAC,CACnE,CACF,CAAC,CAED;AACAT,MAAM,CAAC8B,OAAO,CAAIrB,KAAK,EAAK,CAC1BD,OAAO,CAACC,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CAC3C,CAAC,CAED;AACAT,MAAM,CAAC+B,OAAO,CAAIP,KAAK,EAAK,CAC1BhB,OAAO,CAACc,GAAG,CAAC,gCAAgCE,KAAK,CAACQ,IAAI,IAAIR,KAAK,CAACS,MAAM,EAAE,CAAC,CAEzE;AACA,GAAIT,KAAK,CAACQ,IAAI,GAAK,IAAI,CAAE,CACvBE,UAAU,CAAC,IAAM,CACfjC,cAAc,CAACC,cAAc,CAAEC,gBAAgB,CAAC,CAClD,CAAC,CAAE,IAAI,CAAC,CACV,CACF,CAAC,CAED,MAAO,CAAAH,MAAM,CACf,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAI,cAAc,CAAGA,CAAA,GAAM,CAClC,GAAIJ,MAAM,CAAE,CACVA,MAAM,CAACmC,KAAK,CAAC,IAAI,CAAE,mBAAmB,CAAC,CACvCnC,MAAM,CAAG,IAAI,CACf,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}