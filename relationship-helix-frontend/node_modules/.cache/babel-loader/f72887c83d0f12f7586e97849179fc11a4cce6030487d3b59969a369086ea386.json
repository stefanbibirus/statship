{"ast":null,"code":"var _jsxFileName = \"/home/statship/relationship-helix-frontend/src/context/RelationshipContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useCallback } from 'react';\nimport { api } from '../services/api';\nimport { setupWebsocket, closeWebsocket } from '../services/websocket';\n\n// Crearea contextului de relație\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RelationshipContext = /*#__PURE__*/createContext(null);\n\n// Hook personalizat pentru utilizarea contextului de relație\nexport const useRelationship = () => {\n  _s();\n  const context = useContext(RelationshipContext);\n  if (!context) {\n    throw new Error('useRelationship trebuie utilizat în cadrul unui RelationshipProvider');\n  }\n  return context;\n};\n\n/**\n * RelationshipProvider Component\n * \n * Furnizor de context pentru relația utilizatorului\n */\n_s(useRelationship, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const RelationshipProvider = ({\n  children\n}) => {\n  _s2();\n  const [relationship, setRelationship] = useState(null);\n  const [userCurvePosition, setUserCurvePosition] = useState(0);\n  const [partnerCurvePosition, setPartnerCurvePosition] = useState(0);\n  const [wsConnected, setWsConnected] = useState(false);\n\n  // Obține informații despre relația utilizatorului\n  const fetchRelationship = useCallback(async () => {\n    try {\n      const response = await api.get('/api/relationship');\n      if (response.data && response.data.relationship) {\n        setRelationship(response.data.relationship);\n        setUserCurvePosition(response.data.userCurvePosition || 0);\n        setPartnerCurvePosition(response.data.partnerCurvePosition || 0);\n\n        // Inițializează conexiunea WebSocket dacă există o relație\n        if (response.data.relationship.id && !wsConnected) {\n          initWebsocket(response.data.relationship.id);\n        }\n      } else {\n        setRelationship(null);\n        setUserCurvePosition(0);\n        setPartnerCurvePosition(0);\n\n        // Închide conexiunea WebSocket dacă nu există o relație\n        if (wsConnected) {\n          closeWebsocket();\n          setWsConnected(false);\n        }\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Eroare la obținerea relației:', error);\n      throw error;\n    }\n  }, [wsConnected]);\n\n  // Generează un cod de invitație\n  const generateInviteCode = async () => {\n    try {\n      const response = await api.post('/api/relationship/invite');\n      return response.data.inviteCode;\n    } catch (error) {\n      console.error('Eroare la generarea codului de invitație:', error);\n      throw error;\n    }\n  };\n\n  // Utilizează un cod de invitație - REDENUMIT pentru claritate\n  const joinWithInviteCode = async inviteCode => {\n    try {\n      const response = await api.post('/api/relationship/join', {\n        inviteCode\n      });\n      if (response.data && response.data.relationship) {\n        setRelationship(response.data.relationship);\n        setUserCurvePosition(response.data.userCurvePosition || 0);\n        setPartnerCurvePosition(response.data.partnerCurvePosition || 0);\n\n        // Inițializează conexiunea WebSocket\n        initWebsocket(response.data.relationship.id);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Eroare la utilizarea codului de invitație:', error);\n      throw error;\n    }\n  };\n\n  // Actualizează poziția curbei utilizatorului\n  const updateUserPosition = async position => {\n    try {\n      const response = await api.post('/api/relationship/position', {\n        position\n      });\n      setUserCurvePosition(position);\n      return response.data;\n    } catch (error) {\n      console.error('Eroare la actualizarea poziției:', error);\n      throw error;\n    }\n  };\n\n  // Șterge relația\n  const deleteRelationship = async () => {\n    try {\n      await api.delete('/api/relationship');\n      setRelationship(null);\n      setUserCurvePosition(0);\n      setPartnerCurvePosition(0);\n\n      // Închide conexiunea WebSocket\n      if (wsConnected) {\n        closeWebsocket();\n        setWsConnected(false);\n      }\n    } catch (error) {\n      console.error('Eroare la ștergerea relației:', error);\n      throw error;\n    }\n  };\n\n  // Inițializează WebSocket pentru actualizări în timp real\n  const initWebsocket = relationshipId => {\n    // Callback pentru actualizarea poziției partenerului\n    const handlePositionUpdate = data => {\n      if (data && data.partnerId && data.position !== undefined) {\n        setPartnerCurvePosition(data.position);\n      }\n    };\n\n    // Configurează conexiunea WebSocket\n    setupWebsocket(relationshipId, handlePositionUpdate);\n    setWsConnected(true);\n  };\n\n  // Valoarea contextului\n  const value = {\n    relationship,\n    userCurvePosition,\n    partnerCurvePosition,\n    fetchRelationship,\n    generateInviteCode,\n    joinWithInviteCode,\n    // REDENUMIT pentru claritate\n    updateUserPosition,\n    deleteRelationship\n  };\n  return /*#__PURE__*/_jsxDEV(RelationshipContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s2(RelationshipProvider, \"xdCFues3AiFsne814RMqUajauXU=\");\n_c = RelationshipProvider;\nvar _c;\n$RefreshReg$(_c, \"RelationshipProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","api","setupWebsocket","closeWebsocket","jsxDEV","_jsxDEV","RelationshipContext","useRelationship","_s","context","Error","RelationshipProvider","children","_s2","relationship","setRelationship","userCurvePosition","setUserCurvePosition","partnerCurvePosition","setPartnerCurvePosition","wsConnected","setWsConnected","fetchRelationship","response","get","data","id","initWebsocket","error","console","generateInviteCode","post","inviteCode","joinWithInviteCode","updateUserPosition","position","deleteRelationship","delete","relationshipId","handlePositionUpdate","partnerId","undefined","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/statship/relationship-helix-frontend/src/context/RelationshipContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useCallback } from 'react';\nimport { api } from '../services/api';\nimport { setupWebsocket, closeWebsocket } from '../services/websocket';\n\n// Crearea contextului de relație\nconst RelationshipContext = createContext(null);\n\n// Hook personalizat pentru utilizarea contextului de relație\nexport const useRelationship = () => {\n  const context = useContext(RelationshipContext);\n  if (!context) {\n    throw new Error('useRelationship trebuie utilizat în cadrul unui RelationshipProvider');\n  }\n  return context;\n};\n\n/**\n * RelationshipProvider Component\n * \n * Furnizor de context pentru relația utilizatorului\n */\nexport const RelationshipProvider = ({ children }) => {\n  const [relationship, setRelationship] = useState(null);\n  const [userCurvePosition, setUserCurvePosition] = useState(0);\n  const [partnerCurvePosition, setPartnerCurvePosition] = useState(0);\n  const [wsConnected, setWsConnected] = useState(false);\n  \n  // Obține informații despre relația utilizatorului\n  const fetchRelationship = useCallback(async () => {\n    try {\n      const response = await api.get('/api/relationship');\n      \n      if (response.data && response.data.relationship) {\n        setRelationship(response.data.relationship);\n        setUserCurvePosition(response.data.userCurvePosition || 0);\n        setPartnerCurvePosition(response.data.partnerCurvePosition || 0);\n        \n        // Inițializează conexiunea WebSocket dacă există o relație\n        if (response.data.relationship.id && !wsConnected) {\n          initWebsocket(response.data.relationship.id);\n        }\n      } else {\n        setRelationship(null);\n        setUserCurvePosition(0);\n        setPartnerCurvePosition(0);\n        \n        // Închide conexiunea WebSocket dacă nu există o relație\n        if (wsConnected) {\n          closeWebsocket();\n          setWsConnected(false);\n        }\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('Eroare la obținerea relației:', error);\n      throw error;\n    }\n  }, [wsConnected]);\n  \n  // Generează un cod de invitație\n  const generateInviteCode = async () => {\n    try {\n      const response = await api.post('/api/relationship/invite');\n      return response.data.inviteCode;\n    } catch (error) {\n      console.error('Eroare la generarea codului de invitație:', error);\n      throw error;\n    }\n  };\n  \n  // Utilizează un cod de invitație - REDENUMIT pentru claritate\n  const joinWithInviteCode = async (inviteCode) => {\n    try {\n      const response = await api.post('/api/relationship/join', { inviteCode });\n      \n      if (response.data && response.data.relationship) {\n        setRelationship(response.data.relationship);\n        setUserCurvePosition(response.data.userCurvePosition || 0);\n        setPartnerCurvePosition(response.data.partnerCurvePosition || 0);\n        \n        // Inițializează conexiunea WebSocket\n        initWebsocket(response.data.relationship.id);\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('Eroare la utilizarea codului de invitație:', error);\n      throw error;\n    }\n  };\n  \n  // Actualizează poziția curbei utilizatorului\n  const updateUserPosition = async (position) => {\n    try {\n      const response = await api.post('/api/relationship/position', { position });\n      setUserCurvePosition(position);\n      return response.data;\n    } catch (error) {\n      console.error('Eroare la actualizarea poziției:', error);\n      throw error;\n    }\n  };\n  \n  // Șterge relația\n  const deleteRelationship = async () => {\n    try {\n      await api.delete('/api/relationship');\n      setRelationship(null);\n      setUserCurvePosition(0);\n      setPartnerCurvePosition(0);\n      \n      // Închide conexiunea WebSocket\n      if (wsConnected) {\n        closeWebsocket();\n        setWsConnected(false);\n      }\n    } catch (error) {\n      console.error('Eroare la ștergerea relației:', error);\n      throw error;\n    }\n  };\n  \n  // Inițializează WebSocket pentru actualizări în timp real\n  const initWebsocket = (relationshipId) => {\n    // Callback pentru actualizarea poziției partenerului\n    const handlePositionUpdate = (data) => {\n      if (data && data.partnerId && data.position !== undefined) {\n        setPartnerCurvePosition(data.position);\n      }\n    };\n    \n    // Configurează conexiunea WebSocket\n    setupWebsocket(relationshipId, handlePositionUpdate);\n    setWsConnected(true);\n  };\n  \n  // Valoarea contextului\n  const value = {\n    relationship,\n    userCurvePosition,\n    partnerCurvePosition,\n    fetchRelationship,\n    generateInviteCode,\n    joinWithInviteCode, // REDENUMIT pentru claritate\n    updateUserPosition,\n    deleteRelationship\n  };\n  \n  return (\n    <RelationshipContext.Provider value={value}>\n      {children}\n    </RelationshipContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}