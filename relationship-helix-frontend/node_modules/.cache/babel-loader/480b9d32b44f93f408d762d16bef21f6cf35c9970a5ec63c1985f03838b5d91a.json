{"ast":null,"code":"let socket = null;\n\n/**\n * Configurează conexiunea WebSocket\n * \n * @param {string} relationshipId ID-ul relației\n * @param {Function} onPositionUpdate Callback pentru actualizări de poziție\n */\nexport const setupWebsocket = (relationshipId, onPositionUpdate) => {\n  // Închide orice conexiune existentă\n  if (socket) {\n    closeWebsocket();\n  }\n\n  // Obține token-ul de autentificare\n  const token = localStorage.getItem('auth_token');\n  if (!token) {\n    console.error('Autentificare necesară pentru WebSocket');\n    return;\n  }\n\n  // Construiește URL-ul WebSocket\n  const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n  const wsHost = process.env.REACT_APP_WS_HOST || window.location.hostname + ':8080';\n  const wsUrl = `${wsProtocol}//${wsHost}/ws/relationship/${relationshipId}?token=${token}`;\n\n  // Creează conexiunea WebSocket\n  socket = new WebSocket(wsUrl);\n\n  // Handler pentru deschiderea conexiunii\n  socket.onopen = () => {\n    console.log('Conexiune WebSocket stabilită');\n  };\n\n  // Handler pentru primirea mesajelor\n  socket.onmessage = event => {\n    try {\n      const data = JSON.parse(event.data);\n\n      // Verifică tipul mesajului\n      if (data.type === 'position_update') {\n        onPositionUpdate(data.payload);\n      }\n    } catch (error) {\n      console.error('Eroare la procesarea mesajului WebSocket:', error);\n    }\n  };\n\n  // Handler pentru erori\n  socket.onerror = error => {\n    console.error('Eroare WebSocket:', error);\n  };\n\n  // Handler pentru închiderea conexiunii\n  socket.onclose = event => {\n    console.log(`Conexiune WebSocket închisă: ${event.code} ${event.reason}`);\n\n    // Reconectare automată după 5 secunde în cazul unei închideri anormale\n    if (event.code !== 1000) {\n      setTimeout(() => {\n        setupWebsocket(relationshipId, onPositionUpdate);\n      }, 5000);\n    }\n  };\n  return socket;\n};\n\n/**\n * Închide conexiunea WebSocket\n */\nexport const closeWebsocket = () => {\n  if (socket) {\n    socket.close(1000, 'Închidere normală');\n    socket = null;\n  }\n};","map":{"version":3,"names":["socket","setupWebsocket","relationshipId","onPositionUpdate","closeWebsocket","token","localStorage","getItem","console","error","wsProtocol","window","location","protocol","wsHost","process","env","REACT_APP_WS_HOST","hostname","wsUrl","WebSocket","onopen","log","onmessage","event","data","JSON","parse","type","payload","onerror","onclose","code","reason","setTimeout","close"],"sources":["/home/statship/frontend/src/services/websocket.js"],"sourcesContent":["let socket = null;\n\n/**\n * Configurează conexiunea WebSocket\n * \n * @param {string} relationshipId ID-ul relației\n * @param {Function} onPositionUpdate Callback pentru actualizări de poziție\n */\nexport const setupWebsocket = (relationshipId, onPositionUpdate) => {\n  // Închide orice conexiune existentă\n  if (socket) {\n    closeWebsocket();\n  }\n  \n  // Obține token-ul de autentificare\n  const token = localStorage.getItem('auth_token');\n  \n  if (!token) {\n    console.error('Autentificare necesară pentru WebSocket');\n    return;\n  }\n  \n  // Construiește URL-ul WebSocket\n  const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n  const wsHost = process.env.REACT_APP_WS_HOST || window.location.hostname + ':8080';\n  const wsUrl = `${wsProtocol}//${wsHost}/ws/relationship/${relationshipId}?token=${token}`;\n  \n  // Creează conexiunea WebSocket\n  socket = new WebSocket(wsUrl);\n  \n  // Handler pentru deschiderea conexiunii\n  socket.onopen = () => {\n    console.log('Conexiune WebSocket stabilită');\n  };\n  \n  // Handler pentru primirea mesajelor\n  socket.onmessage = (event) => {\n    try {\n      const data = JSON.parse(event.data);\n      \n      // Verifică tipul mesajului\n      if (data.type === 'position_update') {\n        onPositionUpdate(data.payload);\n      }\n    } catch (error) {\n      console.error('Eroare la procesarea mesajului WebSocket:', error);\n    }\n  };\n  \n  // Handler pentru erori\n  socket.onerror = (error) => {\n    console.error('Eroare WebSocket:', error);\n  };\n  \n  // Handler pentru închiderea conexiunii\n  socket.onclose = (event) => {\n    console.log(`Conexiune WebSocket închisă: ${event.code} ${event.reason}`);\n    \n    // Reconectare automată după 5 secunde în cazul unei închideri anormale\n    if (event.code !== 1000) {\n      setTimeout(() => {\n        setupWebsocket(relationshipId, onPositionUpdate);\n      }, 5000);\n    }\n  };\n  \n  return socket;\n};\n\n/**\n * Închide conexiunea WebSocket\n */\nexport const closeWebsocket = () => {\n  if (socket) {\n    socket.close(1000, 'Închidere normală');\n    socket = null;\n  }\n};"],"mappings":"AAAA,IAAIA,MAAM,GAAG,IAAI;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,cAAc,EAAEC,gBAAgB,KAAK;EAClE;EACA,IAAIH,MAAM,EAAE;IACVI,cAAc,CAAC,CAAC;EAClB;;EAEA;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAEhD,IAAI,CAACF,KAAK,EAAE;IACVG,OAAO,CAACC,KAAK,CAAC,yCAAyC,CAAC;IACxD;EACF;;EAEA;EACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,GAAG,MAAM,GAAG,KAAK;EACzE,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAIN,MAAM,CAACC,QAAQ,CAACM,QAAQ,GAAG,OAAO;EAClF,MAAMC,KAAK,GAAG,GAAGT,UAAU,KAAKI,MAAM,oBAAoBZ,cAAc,UAAUG,KAAK,EAAE;;EAEzF;EACAL,MAAM,GAAG,IAAIoB,SAAS,CAACD,KAAK,CAAC;;EAE7B;EACAnB,MAAM,CAACqB,MAAM,GAAG,MAAM;IACpBb,OAAO,CAACc,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC;;EAED;EACAtB,MAAM,CAACuB,SAAS,GAAIC,KAAK,IAAK;IAC5B,IAAI;MACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;;MAEnC;MACA,IAAIA,IAAI,CAACG,IAAI,KAAK,iBAAiB,EAAE;QACnCzB,gBAAgB,CAACsB,IAAI,CAACI,OAAO,CAAC;MAChC;IACF,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACnE;EACF,CAAC;;EAED;EACAT,MAAM,CAAC8B,OAAO,GAAIrB,KAAK,IAAK;IAC1BD,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;EAC3C,CAAC;;EAED;EACAT,MAAM,CAAC+B,OAAO,GAAIP,KAAK,IAAK;IAC1BhB,OAAO,CAACc,GAAG,CAAC,gCAAgCE,KAAK,CAACQ,IAAI,IAAIR,KAAK,CAACS,MAAM,EAAE,CAAC;;IAEzE;IACA,IAAIT,KAAK,CAACQ,IAAI,KAAK,IAAI,EAAE;MACvBE,UAAU,CAAC,MAAM;QACfjC,cAAc,CAACC,cAAc,EAAEC,gBAAgB,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;EAED,OAAOH,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAIJ,MAAM,EAAE;IACVA,MAAM,CAACmC,KAAK,CAAC,IAAI,EAAE,mBAAmB,CAAC;IACvCnC,MAAM,GAAG,IAAI;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}