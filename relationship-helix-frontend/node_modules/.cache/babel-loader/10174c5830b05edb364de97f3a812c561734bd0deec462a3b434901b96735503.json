{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{api}from'../services/api';import{login as loginApi,register as registerApi,checkAuth}from'../services/auth';// Crearea contextului de autentificare\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);// Hook personalizat pentru utilizarea contextului de autentificare\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth trebuie utilizat în cadrul unui AuthProvider');}return context;};/**\n * AuthProvider Component\n * \n * Furnizor de context pentru autentificare\n */export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[initialized,setInitialized]=useState(false);// Verifică autentificarea la încărcarea aplicației\nuseEffect(()=>{const initAuth=async()=>{const token=localStorage.getItem('auth_token');if(token){try{// Setează token-ul în header-ele de autentificare\napi.defaults.headers.common['Authorization']=`Bearer ${token}`;// Verifică dacă token-ul este valid\nconst userData=await checkAuth();setUser(userData);}catch(error){console.error('Token invalid sau expirat',error);localStorage.removeItem('auth_token');delete api.defaults.headers.common['Authorization'];}}setLoading(false);setInitialized(true);};initAuth();},[]);// Funcția de autentificare\nconst login=async(email,password)=>{try{const{user:userData,token}=await loginApi(email,password);// Salvează token-ul în localStorage\nlocalStorage.setItem('auth_token',token);// Setează token-ul în header-ele de autentificare\napi.defaults.headers.common['Authorization']=`Bearer ${token}`;// Actualizează starea utilizatorului\nsetUser(userData);return userData;}catch(error){throw error;}};// Funcția de înregistrare\nconst register=async(username,email,password)=>{try{const{user:userData,token}=await registerApi(username,email,password);// Salvează token-ul în localStorage\nlocalStorage.setItem('auth_token',token);// Setează token-ul în header-ele de autentificare\napi.defaults.headers.common['Authorization']=`Bearer ${token}`;// Actualizează starea utilizatorului\nsetUser(userData);return userData;}catch(error){throw error;}};// Funcția de delogare\nconst logout=()=>{// Șterge token-ul din localStorage\nlocalStorage.removeItem('auth_token');// Șterge token-ul din header-ele de autentificare\ndelete api.defaults.headers.common['Authorization'];// Resetează starea utilizatorului\nsetUser(null);};// Valoarea contextului\nconst value={user,loading,initialized,login,register,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","api","login","loginApi","register","registerApi","checkAuth","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","initialized","setInitialized","initAuth","token","localStorage","getItem","defaults","headers","common","userData","error","console","removeItem","email","password","setItem","username","logout","value","Provider"],"sources":["/home/statship/relationship-helix-frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { api } from '../services/api';\nimport { login as loginApi, register as registerApi, checkAuth } from '../services/auth';\n\n// Crearea contextului de autentificare\nconst AuthContext = createContext(null);\n\n// Hook personalizat pentru utilizarea contextului de autentificare\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth trebuie utilizat în cadrul unui AuthProvider');\n  }\n  return context;\n};\n\n/**\n * AuthProvider Component\n * \n * Furnizor de context pentru autentificare\n */\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [initialized, setInitialized] = useState(false);\n  \n  // Verifică autentificarea la încărcarea aplicației\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('auth_token');\n      \n      if (token) {\n        try {\n          // Setează token-ul în header-ele de autentificare\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          \n          // Verifică dacă token-ul este valid\n          const userData = await checkAuth();\n          setUser(userData);\n        } catch (error) {\n          console.error('Token invalid sau expirat', error);\n          localStorage.removeItem('auth_token');\n          delete api.defaults.headers.common['Authorization'];\n        }\n      }\n      \n      setLoading(false);\n      setInitialized(true);\n    };\n    \n    initAuth();\n  }, []);\n  \n  // Funcția de autentificare\n  const login = async (email, password) => {\n    try {\n      const { user: userData, token } = await loginApi(email, password);\n      \n      // Salvează token-ul în localStorage\n      localStorage.setItem('auth_token', token);\n      \n      // Setează token-ul în header-ele de autentificare\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Actualizează starea utilizatorului\n      setUser(userData);\n      \n      return userData;\n    } catch (error) {\n      throw error;\n    }\n  };\n  \n  // Funcția de înregistrare\n  const register = async (username, email, password) => {\n    try {\n      const { user: userData, token } = await registerApi(username, email, password);\n      \n      // Salvează token-ul în localStorage\n      localStorage.setItem('auth_token', token);\n      \n      // Setează token-ul în header-ele de autentificare\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      // Actualizează starea utilizatorului\n      setUser(userData);\n      \n      return userData;\n    } catch (error) {\n      throw error;\n    }\n  };\n  \n  // Funcția de delogare\n  const logout = () => {\n    // Șterge token-ul din localStorage\n    localStorage.removeItem('auth_token');\n    \n    // Șterge token-ul din header-ele de autentificare\n    delete api.defaults.headers.common['Authorization'];\n    \n    // Resetează starea utilizatorului\n    setUser(null);\n  };\n  \n  // Valoarea contextului\n  const value = {\n    user,\n    loading,\n    initialized,\n    login,\n    register,\n    logout\n  };\n  \n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}